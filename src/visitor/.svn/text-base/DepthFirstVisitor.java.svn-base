//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
@SuppressWarnings("all")
public class DepthFirstVisitor implements Visitor {
	private static int tagNum = 0;
   
   public void visit(Program n) {
	   n.getBody().accept(this);
   }

   public void visit(Body n) {
	   n.getDeclList().accept(this);
	   n.getStmtList().accept(this);
   }

   public void visit(DeclList n) {
	   for(int i=0; i < n.size(); i++)
		   n.elementAt(i).accept(this);
   }

   /**
    * f0 -> ( AssignStatement() | ReturnStatement() | GotoStatement() | IfStatement() | TryStatement() | ThrowStatement() )
    * f1 -> <INTGER_LITERAL>
    */
   public void visit(StmtList n) {
	   for(int i=0; i < n.size(); i++){
		   n.elementAt(i).accept(this);
	   }
   }

   public void visit(EmptyStatement n){
	   
   }
   
   public void visit(AssignStatement n) {
	   n.getLeft().accept(this);
	   n.getRight().accept(this);
   }

   public void visit(GotoStatement n) {
   }

   public void visit(ReturnStatement n) {
	   n.getExpr().accept(this);
   }

   public void visit(IfStatement n) {
	   n.getCondition().accept(this);
   }

   public void visit(TryStatement n) {
	   n.getTryBlock().accept(this);
	   n.getCatchBlock().accept(this);
   }

   public void visit(ThrowStatement n) {
	   n.getExpr().accept(this);
    }

   public void visit(Function n) {
	   n.getArgList().accept(this);
	   n.getBody().accept(this);
   }


   public void visit(ConditionalExpression n) {
	   n.getExpr1().accept(this);
	   n.getExpr2().accept(this);
	   n.getExpr3().accept(this);
   }

   public void visit(BinaryOperator n) {
	   n.getLeft().accept(this);
	   n.getRight().accept(this);
   }

   public void visit(Selection n) {
       n.getTarget().accept(this);
       n.getElement().accept(this);
   }

   public void visit(FieldExpression n) {
	   n.getExpr().accept(this);
   }

   public void visit(UnaryOperator n) {
	   n.getExpr().accept(this);
   }

   public void visit(NewExpression n) {
	   n.getExpList().accept(this);
   }

   public void visit(ExpList n) {
	   for(int i=0; i < n.size(); i++){
		   n.elementAt(i).accept(this);
	   }
   }

   public void visit(CallExpression n) {
	   n.getExpList().accept(this);
   }

   public void visit(NumberLiteral n) {
   }

   public void visit(NullLiteral n) {
   }

   public void visit(ThisLiteral n) {
   }

   public void visit(BooleanLiteral n) {
   }

   public void visit(StringLiteral n) {
   }

   public void visit(Identifier n) {
   }

}
